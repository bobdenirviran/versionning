(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var navigation = require('ungit-navigation');
var programEvents = require('ungit-program-events');
var md5 = require('blueimp-md5');
var moment = require('moment');

components.register('commit', function(args) {
  return new CommitViewModel(args);
});

function CommitViewModel(gitNode) {
  var self = this;
  this.repoPath = gitNode.graph.repoPath;
  this.sha1 = gitNode.sha1;
  this.server = gitNode.graph.server;
  this.highlighted = gitNode.highlighted;
  this.nodeIsMousehover = gitNode.nodeIsMousehover;
  this.selected = gitNode.selected;
  this.element = ko.observable();
  this.commitTime = ko.observable();
  this.authorTime = ko.observable();
  this.message = ko.observable();
  this.title = ko.observable();
  this.body = ko.observable();
  this.authorDate = ko.observable(0);
  this.authorDateFromNow = ko.observable();
  this.authorName = ko.observable();
  this.authorEmail = ko.observable();
  this.fileLineDiffs = ko.observable();
  this.numberOfAddedLines = ko.observable();
  this.numberOfRemovedLines = ko.observable();
  this.authorGravatar = ko.computed(function() {
    return md5((self.authorEmail() || "").trim().toLowerCase());
  });

  this.showCommitDiff = ko.computed(function() {
    return self.fileLineDiffs() && self.fileLineDiffs().length > 0;
  });

  this.diffStyle = ko.computed(function() {
    var marginLeft = Math.min((gitNode.branchOrder() * 70), 450) * -1;
    if (self.selected() && self.element()) return { "margin-left": marginLeft + 'px', width: (window.innerWidth - 220) + 'px' };
    else return { left: '0px', width: self.element() ? ((self.element().clientWidth - 20) + 'px') : 'inherit' };
  });
}
CommitViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('commit', this, {}, parentElement);
}
CommitViewModel.prototype.setData = function(args) {
  this.commitTime(moment(new Date(args.commitDate)));
  this.authorTime(moment(new Date(args.authorDate)));
  var message = args.message.split('\n');
  this.message(args.message);
  this.title(message[0]);
  this.body(message.slice((message[1] ? 1 : 2)).join('\n'));
  this.authorDate(moment(new Date(args.authorDate)));
  this.authorDateFromNow(this.authorDate().fromNow());
  this.authorName(args.authorName);
  this.authorEmail(args.authorEmail);
  this.numberOfAddedLines(args.fileLineDiffs.length > 0 ? args.fileLineDiffs[0][0] : 0);
  this.numberOfRemovedLines(args.fileLineDiffs.length > 0 ? args.fileLineDiffs[0][1] : 0);
  this.fileLineDiffs(args.fileLineDiffs);
  this.isInited = true;
  this.commitDiff = ko.observable(components.create('commitDiff', {
    fileLineDiffs: this.fileLineDiffs(),
    sha1: this.sha1,
    repoPath: this.repoPath,
    server: this.server
  }));
}
CommitViewModel.prototype.updateLastAuthorDateFromNow = function(deltaT) {
  this.lastUpdatedAuthorDateFromNow = this.lastUpdatedAuthorDateFromNow || 0;
  this.lastUpdatedAuthorDateFromNow += deltaT;
  if(this.lastUpdatedAuthorDateFromNow > 60 * 1000) {
    this.lastUpdatedAuthorDateFromNow = 0;
    this.authorDateFromNow(this.authorDate().fromNow());
  }
}
CommitViewModel.prototype.updateAnimationFrame = function(deltaT) {
  this.updateLastAuthorDateFromNow(deltaT);
}
CommitViewModel.prototype.stopClickPropagation = function(data, event) {
  event.stopImmediatePropagation();
}

},{"blueimp-md5":"blueimp-md5","knockout":"knockout","moment":"moment","ungit-components":"ungit-components","ungit-navigation":"ungit-navigation","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2NvbW1pdC9jb21taXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG52YXIgbmF2aWdhdGlvbiA9IHJlcXVpcmUoJ3VuZ2l0LW5hdmlnYXRpb24nKTtcbnZhciBwcm9ncmFtRXZlbnRzID0gcmVxdWlyZSgndW5naXQtcHJvZ3JhbS1ldmVudHMnKTtcbnZhciBtZDUgPSByZXF1aXJlKCdibHVlaW1wLW1kNScpO1xudmFyIG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdjb21taXQnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgQ29tbWl0Vmlld01vZGVsKGFyZ3MpO1xufSk7XG5cbmZ1bmN0aW9uIENvbW1pdFZpZXdNb2RlbChnaXROb2RlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZXBvUGF0aCA9IGdpdE5vZGUuZ3JhcGgucmVwb1BhdGg7XG4gIHRoaXMuc2hhMSA9IGdpdE5vZGUuc2hhMTtcbiAgdGhpcy5zZXJ2ZXIgPSBnaXROb2RlLmdyYXBoLnNlcnZlcjtcbiAgdGhpcy5oaWdobGlnaHRlZCA9IGdpdE5vZGUuaGlnaGxpZ2h0ZWQ7XG4gIHRoaXMubm9kZUlzTW91c2Vob3ZlciA9IGdpdE5vZGUubm9kZUlzTW91c2Vob3ZlcjtcbiAgdGhpcy5zZWxlY3RlZCA9IGdpdE5vZGUuc2VsZWN0ZWQ7XG4gIHRoaXMuZWxlbWVudCA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5jb21taXRUaW1lID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLmF1dGhvclRpbWUgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMubWVzc2FnZSA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy50aXRsZSA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5ib2R5ID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLmF1dGhvckRhdGUgPSBrby5vYnNlcnZhYmxlKDApO1xuICB0aGlzLmF1dGhvckRhdGVGcm9tTm93ID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLmF1dGhvck5hbWUgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuYXV0aG9yRW1haWwgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuZmlsZUxpbmVEaWZmcyA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5udW1iZXJPZkFkZGVkTGluZXMgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMubnVtYmVyT2ZSZW1vdmVkTGluZXMgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuYXV0aG9yR3JhdmF0YXIgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbWQ1KChzZWxmLmF1dGhvckVtYWlsKCkgfHwgXCJcIikudHJpbSgpLnRvTG93ZXJDYXNlKCkpO1xuICB9KTtcblxuICB0aGlzLnNob3dDb21taXREaWZmID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuZmlsZUxpbmVEaWZmcygpICYmIHNlbGYuZmlsZUxpbmVEaWZmcygpLmxlbmd0aCA+IDA7XG4gIH0pO1xuXG4gIHRoaXMuZGlmZlN0eWxlID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBNYXRoLm1pbigoZ2l0Tm9kZS5icmFuY2hPcmRlcigpICogNzApLCA0NTApICogLTE7XG4gICAgaWYgKHNlbGYuc2VsZWN0ZWQoKSAmJiBzZWxmLmVsZW1lbnQoKSkgcmV0dXJuIHsgXCJtYXJnaW4tbGVmdFwiOiBtYXJnaW5MZWZ0ICsgJ3B4Jywgd2lkdGg6ICh3aW5kb3cuaW5uZXJXaWR0aCAtIDIyMCkgKyAncHgnIH07XG4gICAgZWxzZSByZXR1cm4geyBsZWZ0OiAnMHB4Jywgd2lkdGg6IHNlbGYuZWxlbWVudCgpID8gKChzZWxmLmVsZW1lbnQoKS5jbGllbnRXaWR0aCAtIDIwKSArICdweCcpIDogJ2luaGVyaXQnIH07XG4gIH0pO1xufVxuQ29tbWl0Vmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgnY29tbWl0JywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufVxuQ29tbWl0Vmlld01vZGVsLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24oYXJncykge1xuICB0aGlzLmNvbW1pdFRpbWUobW9tZW50KG5ldyBEYXRlKGFyZ3MuY29tbWl0RGF0ZSkpKTtcbiAgdGhpcy5hdXRob3JUaW1lKG1vbWVudChuZXcgRGF0ZShhcmdzLmF1dGhvckRhdGUpKSk7XG4gIHZhciBtZXNzYWdlID0gYXJncy5tZXNzYWdlLnNwbGl0KCdcXG4nKTtcbiAgdGhpcy5tZXNzYWdlKGFyZ3MubWVzc2FnZSk7XG4gIHRoaXMudGl0bGUobWVzc2FnZVswXSk7XG4gIHRoaXMuYm9keShtZXNzYWdlLnNsaWNlKChtZXNzYWdlWzFdID8gMSA6IDIpKS5qb2luKCdcXG4nKSk7XG4gIHRoaXMuYXV0aG9yRGF0ZShtb21lbnQobmV3IERhdGUoYXJncy5hdXRob3JEYXRlKSkpO1xuICB0aGlzLmF1dGhvckRhdGVGcm9tTm93KHRoaXMuYXV0aG9yRGF0ZSgpLmZyb21Ob3coKSk7XG4gIHRoaXMuYXV0aG9yTmFtZShhcmdzLmF1dGhvck5hbWUpO1xuICB0aGlzLmF1dGhvckVtYWlsKGFyZ3MuYXV0aG9yRW1haWwpO1xuICB0aGlzLm51bWJlck9mQWRkZWRMaW5lcyhhcmdzLmZpbGVMaW5lRGlmZnMubGVuZ3RoID4gMCA/IGFyZ3MuZmlsZUxpbmVEaWZmc1swXVswXSA6IDApO1xuICB0aGlzLm51bWJlck9mUmVtb3ZlZExpbmVzKGFyZ3MuZmlsZUxpbmVEaWZmcy5sZW5ndGggPiAwID8gYXJncy5maWxlTGluZURpZmZzWzBdWzFdIDogMCk7XG4gIHRoaXMuZmlsZUxpbmVEaWZmcyhhcmdzLmZpbGVMaW5lRGlmZnMpO1xuICB0aGlzLmlzSW5pdGVkID0gdHJ1ZTtcbiAgdGhpcy5jb21taXREaWZmID0ga28ub2JzZXJ2YWJsZShjb21wb25lbnRzLmNyZWF0ZSgnY29tbWl0RGlmZicsIHtcbiAgICBmaWxlTGluZURpZmZzOiB0aGlzLmZpbGVMaW5lRGlmZnMoKSxcbiAgICBzaGExOiB0aGlzLnNoYTEsXG4gICAgcmVwb1BhdGg6IHRoaXMucmVwb1BhdGgsXG4gICAgc2VydmVyOiB0aGlzLnNlcnZlclxuICB9KSk7XG59XG5Db21taXRWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZUxhc3RBdXRob3JEYXRlRnJvbU5vdyA9IGZ1bmN0aW9uKGRlbHRhVCkge1xuICB0aGlzLmxhc3RVcGRhdGVkQXV0aG9yRGF0ZUZyb21Ob3cgPSB0aGlzLmxhc3RVcGRhdGVkQXV0aG9yRGF0ZUZyb21Ob3cgfHwgMDtcbiAgdGhpcy5sYXN0VXBkYXRlZEF1dGhvckRhdGVGcm9tTm93ICs9IGRlbHRhVDtcbiAgaWYodGhpcy5sYXN0VXBkYXRlZEF1dGhvckRhdGVGcm9tTm93ID4gNjAgKiAxMDAwKSB7XG4gICAgdGhpcy5sYXN0VXBkYXRlZEF1dGhvckRhdGVGcm9tTm93ID0gMDtcbiAgICB0aGlzLmF1dGhvckRhdGVGcm9tTm93KHRoaXMuYXV0aG9yRGF0ZSgpLmZyb21Ob3coKSk7XG4gIH1cbn1cbkNvbW1pdFZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihkZWx0YVQpIHtcbiAgdGhpcy51cGRhdGVMYXN0QXV0aG9yRGF0ZUZyb21Ob3coZGVsdGFUKTtcbn1cbkNvbW1pdFZpZXdNb2RlbC5wcm90b3R5cGUuc3RvcENsaWNrUHJvcGFnYXRpb24gPSBmdW5jdGlvbihkYXRhLCBldmVudCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cbiJdfQ==
