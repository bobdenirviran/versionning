(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var addressParser = require('ungit-address-parser');
var navigation = require('ungit-navigation');
var programEvents = require('ungit-program-events');

components.register('path', function(args) {
  return new PathViewModel(args.server, args.path);
});

var PathViewModel = function(server, path) {
  var self = this;
  this.server = server;
  this.repoPath = ko.observable(path);
  this.dirName = this.repoPath().replace('\\', '/')
                   .split('/')
                   .filter(function(s) { return s; })
                   .slice(-1)[0] || '/';

  this.status = ko.observable('loading');
  this.loadingProgressBar = components.create('progressBar', { predictionMemoryKey: 'path-loading-' + path });
  this.loadingProgressBar.start();
  this.cloningProgressBar = components.create('progressBar', {
    predictionMemoryKey: 'path-cloning-' + path,
    fallbackPredictedTimeMs: 10000
  });
  this.cloneUrl = ko.observable();
  this.showDirectoryCreatedAlert = ko.observable(false);
  this.cloneDestinationImplicit = ko.computed(function() {
    var defaultText = 'destination folder';
    if (!self.cloneUrl()) return defaultText;

    var parsedAddress = addressParser.parseAddress(self.cloneUrl());
    return parsedAddress.shortProject || defaultText;
  });
  this.cloneDestination = ko.observable();
  this.repository = ko.observable();
}
PathViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('path', this, {}, parentElement);
}
PathViewModel.prototype.template = 'path';
PathViewModel.prototype.shown = function() {
  this.updateStatus();
}
PathViewModel.prototype.updateAnimationFrame = function(deltaT) {
  if (this.repository())
    this.repository().updateAnimationFrame(deltaT);
}
PathViewModel.prototype.updateStatus = function() {
  var self = this;
  return this.server.getPromise('/quickstatus', { path: this.repoPath() })
    .then(function(status){
      if (status.type == 'inited' || status.type == 'bare') {
        if (self.repoPath() !== status.gitRootPath) {
          self.repoPath(status.gitRootPath);
          programEvents.dispatch({ event: 'navigated-to-path', path: self.repoPath() });
          programEvents.dispatch({ event: 'working-tree-changed' });
        }
        self.status(status.type);
        if (!self.repository()) {
          self.repository(components.create('repository', { server: self.server, path: self }));
        }
      } else if (status.type == 'uninited' || status.type == 'no-such-path') {
        self.status(status.type);
        self.repository(null);
      }
      return null;
    }).catch(function(err) { })
    .finally(function() { self.loadingProgressBar.stop() });
}
PathViewModel.prototype.initRepository = function() {
  var self = this;
  return this.server.postPromise('/init', { path: this.repoPath() })
    .finally(function(res) { self.updateStatus(); });
}
PathViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'request-credentials') this.cloningProgressBar.pause();
  else if (event.event == 'request-credentials-response') this.cloningProgressBar.unpause();
  else if (event.event == 'working-tree-changed') this.updateStatus();
  else if (event.event == 'request-app-content-refresh') this.updateStatus();

  if (this.repository()) this.repository().onProgramEvent(event);
}
PathViewModel.prototype.cloneRepository = function() {
  var self = this;
  self.status('cloning');
  this.cloningProgressBar.start();
  var dest = this.cloneDestination() || this.cloneDestinationImplicit();

  return this.server.postPromise('/clone', { path: this.repoPath(), url: this.cloneUrl(), destinationDir: dest }).then(function(res) {
      navigation.browseTo('repository?path=' + encodeURIComponent(res.path));
    }).finally(function() { self.cloningProgressBar.stop() })
}
PathViewModel.prototype.createDir = function() {
  var self = this;
  this.showDirectoryCreatedAlert(true);
  return this.server.postPromise('/createDir',  { dir: this.repoPath() })
    .then(function() { self.updateStatus(); });
}

},{"knockout":"knockout","ungit-address-parser":"ungit-address-parser","ungit-components":"ungit-components","ungit-navigation":"ungit-navigation","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3BhdGgvcGF0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbnZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBhZGRyZXNzUGFyc2VyID0gcmVxdWlyZSgndW5naXQtYWRkcmVzcy1wYXJzZXInKTtcbnZhciBuYXZpZ2F0aW9uID0gcmVxdWlyZSgndW5naXQtbmF2aWdhdGlvbicpO1xudmFyIHByb2dyYW1FdmVudHMgPSByZXF1aXJlKCd1bmdpdC1wcm9ncmFtLWV2ZW50cycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdwYXRoJywgZnVuY3Rpb24oYXJncykge1xuICByZXR1cm4gbmV3IFBhdGhWaWV3TW9kZWwoYXJncy5zZXJ2ZXIsIGFyZ3MucGF0aCk7XG59KTtcblxudmFyIFBhdGhWaWV3TW9kZWwgPSBmdW5jdGlvbihzZXJ2ZXIsIHBhdGgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgdGhpcy5yZXBvUGF0aCA9IGtvLm9ic2VydmFibGUocGF0aCk7XG4gIHRoaXMuZGlyTmFtZSA9IHRoaXMucmVwb1BhdGgoKS5yZXBsYWNlKCdcXFxcJywgJy8nKVxuICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnLycpXG4gICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihzKSB7IHJldHVybiBzOyB9KVxuICAgICAgICAgICAgICAgICAgIC5zbGljZSgtMSlbMF0gfHwgJy8nO1xuXG4gIHRoaXMuc3RhdHVzID0ga28ub2JzZXJ2YWJsZSgnbG9hZGluZycpO1xuICB0aGlzLmxvYWRpbmdQcm9ncmVzc0JhciA9IGNvbXBvbmVudHMuY3JlYXRlKCdwcm9ncmVzc0JhcicsIHsgcHJlZGljdGlvbk1lbW9yeUtleTogJ3BhdGgtbG9hZGluZy0nICsgcGF0aCB9KTtcbiAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgdGhpcy5jbG9uaW5nUHJvZ3Jlc3NCYXIgPSBjb21wb25lbnRzLmNyZWF0ZSgncHJvZ3Jlc3NCYXInLCB7XG4gICAgcHJlZGljdGlvbk1lbW9yeUtleTogJ3BhdGgtY2xvbmluZy0nICsgcGF0aCxcbiAgICBmYWxsYmFja1ByZWRpY3RlZFRpbWVNczogMTAwMDBcbiAgfSk7XG4gIHRoaXMuY2xvbmVVcmwgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuc2hvd0RpcmVjdG9yeUNyZWF0ZWRBbGVydCA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLmNsb25lRGVzdGluYXRpb25JbXBsaWNpdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZhdWx0VGV4dCA9ICdkZXN0aW5hdGlvbiBmb2xkZXInO1xuICAgIGlmICghc2VsZi5jbG9uZVVybCgpKSByZXR1cm4gZGVmYXVsdFRleHQ7XG5cbiAgICB2YXIgcGFyc2VkQWRkcmVzcyA9IGFkZHJlc3NQYXJzZXIucGFyc2VBZGRyZXNzKHNlbGYuY2xvbmVVcmwoKSk7XG4gICAgcmV0dXJuIHBhcnNlZEFkZHJlc3Muc2hvcnRQcm9qZWN0IHx8IGRlZmF1bHRUZXh0O1xuICB9KTtcbiAgdGhpcy5jbG9uZURlc3RpbmF0aW9uID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLnJlcG9zaXRvcnkgPSBrby5vYnNlcnZhYmxlKCk7XG59XG5QYXRoVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgncGF0aCcsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLnRlbXBsYXRlID0gJ3BhdGgnO1xuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUuc2hvd24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy51cGRhdGVTdGF0dXMoKTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZUFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oZGVsdGFUKSB7XG4gIGlmICh0aGlzLnJlcG9zaXRvcnkoKSlcbiAgICB0aGlzLnJlcG9zaXRvcnkoKS51cGRhdGVBbmltYXRpb25GcmFtZShkZWx0YVQpO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlU3RhdHVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIHRoaXMuc2VydmVyLmdldFByb21pc2UoJy9xdWlja3N0YXR1cycsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oc3RhdHVzKXtcbiAgICAgIGlmIChzdGF0dXMudHlwZSA9PSAnaW5pdGVkJyB8fCBzdGF0dXMudHlwZSA9PSAnYmFyZScpIHtcbiAgICAgICAgaWYgKHNlbGYucmVwb1BhdGgoKSAhPT0gc3RhdHVzLmdpdFJvb3RQYXRoKSB7XG4gICAgICAgICAgc2VsZi5yZXBvUGF0aChzdGF0dXMuZ2l0Um9vdFBhdGgpO1xuICAgICAgICAgIHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ25hdmlnYXRlZC10by1wYXRoJywgcGF0aDogc2VsZi5yZXBvUGF0aCgpIH0pO1xuICAgICAgICAgIHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ3dvcmtpbmctdHJlZS1jaGFuZ2VkJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnN0YXR1cyhzdGF0dXMudHlwZSk7XG4gICAgICAgIGlmICghc2VsZi5yZXBvc2l0b3J5KCkpIHtcbiAgICAgICAgICBzZWxmLnJlcG9zaXRvcnkoY29tcG9uZW50cy5jcmVhdGUoJ3JlcG9zaXRvcnknLCB7IHNlcnZlcjogc2VsZi5zZXJ2ZXIsIHBhdGg6IHNlbGYgfSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cy50eXBlID09ICd1bmluaXRlZCcgfHwgc3RhdHVzLnR5cGUgPT0gJ25vLXN1Y2gtcGF0aCcpIHtcbiAgICAgICAgc2VsZi5zdGF0dXMoc3RhdHVzLnR5cGUpO1xuICAgICAgICBzZWxmLnJlcG9zaXRvcnkobnVsbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHsgfSlcbiAgICAuZmluYWxseShmdW5jdGlvbigpIHsgc2VsZi5sb2FkaW5nUHJvZ3Jlc3NCYXIuc3RvcCgpIH0pO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUuaW5pdFJlcG9zaXRvcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXR1cm4gdGhpcy5zZXJ2ZXIucG9zdFByb21pc2UoJy9pbml0JywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoKCkgfSlcbiAgICAuZmluYWxseShmdW5jdGlvbihyZXMpIHsgc2VsZi51cGRhdGVTdGF0dXMoKTsgfSk7XG59XG5QYXRoVmlld01vZGVsLnByb3RvdHlwZS5vblByb2dyYW1FdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChldmVudC5ldmVudCA9PSAncmVxdWVzdC1jcmVkZW50aWFscycpIHRoaXMuY2xvbmluZ1Byb2dyZXNzQmFyLnBhdXNlKCk7XG4gIGVsc2UgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWNyZWRlbnRpYWxzLXJlc3BvbnNlJykgdGhpcy5jbG9uaW5nUHJvZ3Jlc3NCYXIudW5wYXVzZSgpO1xuICBlbHNlIGlmIChldmVudC5ldmVudCA9PSAnd29ya2luZy10cmVlLWNoYW5nZWQnKSB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuICBlbHNlIGlmIChldmVudC5ldmVudCA9PSAncmVxdWVzdC1hcHAtY29udGVudC1yZWZyZXNoJykgdGhpcy51cGRhdGVTdGF0dXMoKTtcblxuICBpZiAodGhpcy5yZXBvc2l0b3J5KCkpIHRoaXMucmVwb3NpdG9yeSgpLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLmNsb25lUmVwb3NpdG9yeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHNlbGYuc3RhdHVzKCdjbG9uaW5nJyk7XG4gIHRoaXMuY2xvbmluZ1Byb2dyZXNzQmFyLnN0YXJ0KCk7XG4gIHZhciBkZXN0ID0gdGhpcy5jbG9uZURlc3RpbmF0aW9uKCkgfHwgdGhpcy5jbG9uZURlc3RpbmF0aW9uSW1wbGljaXQoKTtcblxuICByZXR1cm4gdGhpcy5zZXJ2ZXIucG9zdFByb21pc2UoJy9jbG9uZScsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpLCB1cmw6IHRoaXMuY2xvbmVVcmwoKSwgZGVzdGluYXRpb25EaXI6IGRlc3QgfSkudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgIG5hdmlnYXRpb24uYnJvd3NlVG8oJ3JlcG9zaXRvcnk/cGF0aD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlcy5wYXRoKSk7XG4gICAgfSkuZmluYWxseShmdW5jdGlvbigpIHsgc2VsZi5jbG9uaW5nUHJvZ3Jlc3NCYXIuc3RvcCgpIH0pXG59XG5QYXRoVmlld01vZGVsLnByb3RvdHlwZS5jcmVhdGVEaXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNob3dEaXJlY3RvcnlDcmVhdGVkQWxlcnQodHJ1ZSk7XG4gIHJldHVybiB0aGlzLnNlcnZlci5wb3N0UHJvbWlzZSgnL2NyZWF0ZURpcicsICB7IGRpcjogdGhpcy5yZXBvUGF0aCgpIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oKSB7IHNlbGYudXBkYXRlU3RhdHVzKCk7IH0pO1xufVxuIl19
