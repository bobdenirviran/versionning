(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');

components.register('submodules', function(args) {
  return new SubmodulesViewModel(args.server, args.repoPath);
});

function SubmodulesViewModel(server, repoPath) {
  var self = this;
  this.repoPath = repoPath;
  this.server = server;
  this.submodules = ko.observableArray();

  this.updateProgressBar = components.create('progressBar', { predictionMemoryKey: 'Updating Submodules', temporary: true });
  this.fetchProgressBar = components.create('progressBar', { predictionMemoryKey: 'Adding Submodule', temporary: true });
}

SubmodulesViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'submodule-fetch') this.fetchSubmodules();
}

SubmodulesViewModel.prototype.updateNode = function(parentElement) {
  this.fetchSubmodules().then(function(submoduleViewModel) {
    ko.renderTemplate('submodules', submoduleViewModel, {}, parentElement);
  });
}

SubmodulesViewModel.prototype.fetchSubmodules = function() {
  var self = this;
  return this.server.getPromise('/submodules', { path: this.repoPath() })
    .then(function(submodules) {
      self.submodules(submodules && Array.isArray(submodules) ? submodules : []);
      return self;
    });
}

SubmodulesViewModel.prototype.isRunning = function() {
  return (this.updateProgressBar.running() || this.fetchProgressBar.running());
}

SubmodulesViewModel.prototype.updateSubmodules = function() {
  if (this.isRunning()) return;
  var self = this;

  this.updateProgressBar.start();
  return this.server.postPromise('/submodules/update', { path: this.repoPath() }).finally(function() {
    self.updateProgressBar.stop();
  });
}

SubmodulesViewModel.prototype.showAddSubmoduleDialog = function() {
  var self = this;
  components.create('addsubmoduledialog')
    .show()
    .closeThen(function(diag) {
      if (!diag.isSubmitted()) return;
      self.fetchProgressBar.start();
      self.server.postPromise('/submodules/add', { path: self.repoPath(), submoduleUrl: diag.url(), submodulePath: diag.path() }).then(function() {
          programEvents.dispatch({ event: 'submodule-fetch' });
        }).finally(function() { self.fetchProgressBar.stop(); });
    });
}

SubmodulesViewModel.prototype.submoduleLinkClick = function(submodule) {
  window.location.href = submodule.url;
}

SubmodulesViewModel.prototype.submodulePathClick = function(submodule) {
  window.location.href = document.URL + ungit.config.fileSeparator + submodule.path;
}

SubmodulesViewModel.prototype.submoduleRemove = function(submodule) {
  var self = this;
  components.create('yesnodialog', { title: 'Are you sure?', details: 'Deleting ' + submodule.name + ' submodule cannot be undone with ungit.'})
    .show()
    .closeThen(function(diag) {
      if (!diag.result()) return;
      self.fetchProgressBar.start();
      self.server.delPromise('/submodules', { path: self.repoPath(), submodulePath: submodule.path, submoduleName: submodule.name }).catch(function(err, result) {
        console.log(err);
      }).then(function() {
        programEvents.dispatch({ event: 'submodule-fetch' });
        self.fetchProgressBar.stop();
      })
    });
}

},{"knockout":"knockout","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3N1Ym1vZHVsZXMvc3VibW9kdWxlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG52YXIgcHJvZ3JhbUV2ZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LXByb2dyYW0tZXZlbnRzJyk7XG5cbmNvbXBvbmVudHMucmVnaXN0ZXIoJ3N1Ym1vZHVsZXMnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgU3VibW9kdWxlc1ZpZXdNb2RlbChhcmdzLnNlcnZlciwgYXJncy5yZXBvUGF0aCk7XG59KTtcblxuZnVuY3Rpb24gU3VibW9kdWxlc1ZpZXdNb2RlbChzZXJ2ZXIsIHJlcG9QYXRoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5yZXBvUGF0aCA9IHJlcG9QYXRoO1xuICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgdGhpcy5zdWJtb2R1bGVzID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XG5cbiAgdGhpcy51cGRhdGVQcm9ncmVzc0JhciA9IGNvbXBvbmVudHMuY3JlYXRlKCdwcm9ncmVzc0JhcicsIHsgcHJlZGljdGlvbk1lbW9yeUtleTogJ1VwZGF0aW5nIFN1Ym1vZHVsZXMnLCB0ZW1wb3Jhcnk6IHRydWUgfSk7XG4gIHRoaXMuZmV0Y2hQcm9ncmVzc0JhciA9IGNvbXBvbmVudHMuY3JlYXRlKCdwcm9ncmVzc0JhcicsIHsgcHJlZGljdGlvbk1lbW9yeUtleTogJ0FkZGluZyBTdWJtb2R1bGUnLCB0ZW1wb3Jhcnk6IHRydWUgfSk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLm9uUHJvZ3JhbUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmV2ZW50ID09ICdzdWJtb2R1bGUtZmV0Y2gnKSB0aGlzLmZldGNoU3VibW9kdWxlcygpO1xufVxuXG5TdWJtb2R1bGVzVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICB0aGlzLmZldGNoU3VibW9kdWxlcygpLnRoZW4oZnVuY3Rpb24oc3VibW9kdWxlVmlld01vZGVsKSB7XG4gICAga28ucmVuZGVyVGVtcGxhdGUoJ3N1Ym1vZHVsZXMnLCBzdWJtb2R1bGVWaWV3TW9kZWwsIHt9LCBwYXJlbnRFbGVtZW50KTtcbiAgfSk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLmZldGNoU3VibW9kdWxlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzLnNlcnZlci5nZXRQcm9taXNlKCcvc3VibW9kdWxlcycsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCgpIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24oc3VibW9kdWxlcykge1xuICAgICAgc2VsZi5zdWJtb2R1bGVzKHN1Ym1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShzdWJtb2R1bGVzKSA/IHN1Ym1vZHVsZXMgOiBbXSk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9KTtcbn1cblxuU3VibW9kdWxlc1ZpZXdNb2RlbC5wcm90b3R5cGUuaXNSdW5uaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAodGhpcy51cGRhdGVQcm9ncmVzc0Jhci5ydW5uaW5nKCkgfHwgdGhpcy5mZXRjaFByb2dyZXNzQmFyLnJ1bm5pbmcoKSk7XG59XG5cblN1Ym1vZHVsZXNWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZVN1Ym1vZHVsZXMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaXNSdW5uaW5nKCkpIHJldHVybjtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMudXBkYXRlUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgcmV0dXJuIHRoaXMuc2VydmVyLnBvc3RQcm9taXNlKCcvc3VibW9kdWxlcy91cGRhdGUnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSB9KS5maW5hbGx5KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYudXBkYXRlUHJvZ3Jlc3NCYXIuc3RvcCgpO1xuICB9KTtcbn1cblxuU3VibW9kdWxlc1ZpZXdNb2RlbC5wcm90b3R5cGUuc2hvd0FkZFN1Ym1vZHVsZURpYWxvZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNvbXBvbmVudHMuY3JlYXRlKCdhZGRzdWJtb2R1bGVkaWFsb2cnKVxuICAgIC5zaG93KClcbiAgICAuY2xvc2VUaGVuKGZ1bmN0aW9uKGRpYWcpIHtcbiAgICAgIGlmICghZGlhZy5pc1N1Ym1pdHRlZCgpKSByZXR1cm47XG4gICAgICBzZWxmLmZldGNoUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgICAgIHNlbGYuc2VydmVyLnBvc3RQcm9taXNlKCcvc3VibW9kdWxlcy9hZGQnLCB7IHBhdGg6IHNlbGYucmVwb1BhdGgoKSwgc3VibW9kdWxlVXJsOiBkaWFnLnVybCgpLCBzdWJtb2R1bGVQYXRoOiBkaWFnLnBhdGgoKSB9KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ3N1Ym1vZHVsZS1mZXRjaCcgfSk7XG4gICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24oKSB7IHNlbGYuZmV0Y2hQcm9ncmVzc0Jhci5zdG9wKCk7IH0pO1xuICAgIH0pO1xufVxuXG5TdWJtb2R1bGVzVmlld01vZGVsLnByb3RvdHlwZS5zdWJtb2R1bGVMaW5rQ2xpY2sgPSBmdW5jdGlvbihzdWJtb2R1bGUpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBzdWJtb2R1bGUudXJsO1xufVxuXG5TdWJtb2R1bGVzVmlld01vZGVsLnByb3RvdHlwZS5zdWJtb2R1bGVQYXRoQ2xpY2sgPSBmdW5jdGlvbihzdWJtb2R1bGUpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBkb2N1bWVudC5VUkwgKyB1bmdpdC5jb25maWcuZmlsZVNlcGFyYXRvciArIHN1Ym1vZHVsZS5wYXRoO1xufVxuXG5TdWJtb2R1bGVzVmlld01vZGVsLnByb3RvdHlwZS5zdWJtb2R1bGVSZW1vdmUgPSBmdW5jdGlvbihzdWJtb2R1bGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBjb21wb25lbnRzLmNyZWF0ZSgneWVzbm9kaWFsb2cnLCB7IHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsIGRldGFpbHM6ICdEZWxldGluZyAnICsgc3VibW9kdWxlLm5hbWUgKyAnIHN1Ym1vZHVsZSBjYW5ub3QgYmUgdW5kb25lIHdpdGggdW5naXQuJ30pXG4gICAgLnNob3coKVxuICAgIC5jbG9zZVRoZW4oZnVuY3Rpb24oZGlhZykge1xuICAgICAgaWYgKCFkaWFnLnJlc3VsdCgpKSByZXR1cm47XG4gICAgICBzZWxmLmZldGNoUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgICAgIHNlbGYuc2VydmVyLmRlbFByb21pc2UoJy9zdWJtb2R1bGVzJywgeyBwYXRoOiBzZWxmLnJlcG9QYXRoKCksIHN1Ym1vZHVsZVBhdGg6IHN1Ym1vZHVsZS5wYXRoLCBzdWJtb2R1bGVOYW1lOiBzdWJtb2R1bGUubmFtZSB9KS5jYXRjaChmdW5jdGlvbihlcnIsIHJlc3VsdCkge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAnc3VibW9kdWxlLWZldGNoJyB9KTtcbiAgICAgICAgc2VsZi5mZXRjaFByb2dyZXNzQmFyLnN0b3AoKTtcbiAgICAgIH0pXG4gICAgfSk7XG59XG4iXX0=
