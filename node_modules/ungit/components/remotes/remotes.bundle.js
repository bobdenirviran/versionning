(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var _ = require('lodash');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');
var Promise = require('bluebird');

components.register('remotes', function(args) {
  return new RemotesViewModel(args.server, args.repoPath);
});

function RemotesViewModel(server, repoPath) {
  var self = this;
  this.repoPath = repoPath;
  this.server = server;
  this.remotes = ko.observable([]);
  this.currentRemote = ko.observable(null);
  this.currentRemote.subscribe(function(value) {
    programEvents.dispatch({ event: 'current-remote-changed', newRemote: value });
  });
  this.fetchLabel = ko.computed(function() {
    if (self.currentRemote()) return 'Fetch from ' + self.currentRemote();
    else return 'No remotes specified';
  })

  this.fetchingProgressBar = components.create('progressBar', { predictionMemoryKey: 'fetching-' + this.repoPath(), temporary: true });

  this.fetchEnabled = ko.computed(function() {
    return self.remotes().length > 0;
  });

  this.shouldAutoFetch = ungit.config.autoFetch;
  this.updateRemotes();
}
RemotesViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('remotes', this, {}, parentElement);
}
RemotesViewModel.prototype.clickFetch = function() { this.fetch({ nodes: true, tags: true }); }
RemotesViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'request-credentials') this.fetchingProgressBar.pause();
  else if (event.event == 'request-credentials-response') this.fetchingProgressBar.unpause();
  else if (event.event == 'request-fetch-tags') this.fetch({ tags: true });
}
RemotesViewModel.prototype.fetch = function(options) {
  if (this.fetchingProgressBar.running()) return;
  var self = this;

  this.fetchingProgressBar.start();
  var tagPromise = options.tags ? self.server.getPromise('/remote/tags', { path: self.repoPath(), remote: self.currentRemote() }) : null;
  var fetchPromise = options.nodes ? self.server.postPromise('/fetch', { path: self.repoPath(), remote: self.currentRemote() }) : null;
  return Promise.props({tag: tagPromise, fetch: fetchPromise})
    .then(function(result) {
      if (options.tags) programEvents.dispatch({ event: 'remote-tags-update', tags: result.tag });
    }).finally(function() {
      self.fetchingProgressBar.stop();
    });
}

RemotesViewModel.prototype.updateRemotes = function() {
  var self = this;

  return this.server.getPromise('/remotes', { path: this.repoPath() })
    .then(function(remotes) {
      remotes = remotes.map(function(remote) {
        return {
          name: remote,
          changeRemote: function() { self.currentRemote(remote) }
        }
      });
      self.remotes(remotes);
      if (!self.currentRemote() && remotes.length > 0) {
        if (_.find(remotes, { 'name': 'origin' })) {// default to origin if it exists
          self.currentRemote('origin');
        } else {// otherwise take the first one
          self.currentRemote(remotes[0].name);
        }

        if (self.shouldAutoFetch) {
          self.shouldAutoFetch = false;
          return self.fetch({ nodes: true, tags: true });
        }
      }
    }).catch(function(err) {
      if (err.errorCode != 'not-a-repository') throw err;
    });
}
RemotesViewModel.prototype.showAddRemoteDialog = function() {
  var self = this;
  components.create('addremotedialog')
    .show()
    .closeThen(function(diag) {
      if(diag.isSubmitted()) {
        return self.server.postPromise('/remotes/' + encodeURIComponent(diag.name()), { path: self.repoPath(), url: diag.url() })
          .then(function() { self.updateRemotes(); });
      }
    });
}

RemotesViewModel.prototype.remoteRemove = function(remote) {
  var self = this;
  components.create('yesnodialog', { title: 'Are you sure?', details: 'Deleting ' + remote.name + ' remote cannot be undone with ungit.'})
    .show()
    .closeThen(function(diag) {
      if (diag.result()) {
        self.fetchingProgressBar.start();
        return self.server.delPromise('/remotes/' + remote.name, { path: self.repoPath() })
          .then(function() { self.updateRemotes(); })
          .catch(console.log)
          .finally(function() { self.fetchingProgressBar.stop(); });
      }
    });
}

},{"bluebird":undefined,"knockout":"knockout","lodash":"lodash","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3JlbW90ZXMvcmVtb3Rlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xudmFyIHByb2dyYW1FdmVudHMgPSByZXF1aXJlKCd1bmdpdC1wcm9ncmFtLWV2ZW50cycpO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdyZW1vdGVzJywgZnVuY3Rpb24oYXJncykge1xuICByZXR1cm4gbmV3IFJlbW90ZXNWaWV3TW9kZWwoYXJncy5zZXJ2ZXIsIGFyZ3MucmVwb1BhdGgpO1xufSk7XG5cbmZ1bmN0aW9uIFJlbW90ZXNWaWV3TW9kZWwoc2VydmVyLCByZXBvUGF0aCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMucmVwb1BhdGggPSByZXBvUGF0aDtcbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMucmVtb3RlcyA9IGtvLm9ic2VydmFibGUoW10pO1xuICB0aGlzLmN1cnJlbnRSZW1vdGUgPSBrby5vYnNlcnZhYmxlKG51bGwpO1xuICB0aGlzLmN1cnJlbnRSZW1vdGUuc3Vic2NyaWJlKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAnY3VycmVudC1yZW1vdGUtY2hhbmdlZCcsIG5ld1JlbW90ZTogdmFsdWUgfSk7XG4gIH0pO1xuICB0aGlzLmZldGNoTGFiZWwgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5jdXJyZW50UmVtb3RlKCkpIHJldHVybiAnRmV0Y2ggZnJvbSAnICsgc2VsZi5jdXJyZW50UmVtb3RlKCk7XG4gICAgZWxzZSByZXR1cm4gJ05vIHJlbW90ZXMgc3BlY2lmaWVkJztcbiAgfSlcblxuICB0aGlzLmZldGNoaW5nUHJvZ3Jlc3NCYXIgPSBjb21wb25lbnRzLmNyZWF0ZSgncHJvZ3Jlc3NCYXInLCB7IHByZWRpY3Rpb25NZW1vcnlLZXk6ICdmZXRjaGluZy0nICsgdGhpcy5yZXBvUGF0aCgpLCB0ZW1wb3Jhcnk6IHRydWUgfSk7XG5cbiAgdGhpcy5mZXRjaEVuYWJsZWQgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5yZW1vdGVzKCkubGVuZ3RoID4gMDtcbiAgfSk7XG5cbiAgdGhpcy5zaG91bGRBdXRvRmV0Y2ggPSB1bmdpdC5jb25maWcuYXV0b0ZldGNoO1xuICB0aGlzLnVwZGF0ZVJlbW90ZXMoKTtcbn1cblJlbW90ZXNWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCdyZW1vdGVzJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufVxuUmVtb3Rlc1ZpZXdNb2RlbC5wcm90b3R5cGUuY2xpY2tGZXRjaCA9IGZ1bmN0aW9uKCkgeyB0aGlzLmZldGNoKHsgbm9kZXM6IHRydWUsIHRhZ3M6IHRydWUgfSk7IH1cblJlbW90ZXNWaWV3TW9kZWwucHJvdG90eXBlLm9uUHJvZ3JhbUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWNyZWRlbnRpYWxzJykgdGhpcy5mZXRjaGluZ1Byb2dyZXNzQmFyLnBhdXNlKCk7XG4gIGVsc2UgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWNyZWRlbnRpYWxzLXJlc3BvbnNlJykgdGhpcy5mZXRjaGluZ1Byb2dyZXNzQmFyLnVucGF1c2UoKTtcbiAgZWxzZSBpZiAoZXZlbnQuZXZlbnQgPT0gJ3JlcXVlc3QtZmV0Y2gtdGFncycpIHRoaXMuZmV0Y2goeyB0YWdzOiB0cnVlIH0pO1xufVxuUmVtb3Rlc1ZpZXdNb2RlbC5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIGlmICh0aGlzLmZldGNoaW5nUHJvZ3Jlc3NCYXIucnVubmluZygpKSByZXR1cm47XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLmZldGNoaW5nUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgdmFyIHRhZ1Byb21pc2UgPSBvcHRpb25zLnRhZ3MgPyBzZWxmLnNlcnZlci5nZXRQcm9taXNlKCcvcmVtb3RlL3RhZ3MnLCB7IHBhdGg6IHNlbGYucmVwb1BhdGgoKSwgcmVtb3RlOiBzZWxmLmN1cnJlbnRSZW1vdGUoKSB9KSA6IG51bGw7XG4gIHZhciBmZXRjaFByb21pc2UgPSBvcHRpb25zLm5vZGVzID8gc2VsZi5zZXJ2ZXIucG9zdFByb21pc2UoJy9mZXRjaCcsIHsgcGF0aDogc2VsZi5yZXBvUGF0aCgpLCByZW1vdGU6IHNlbGYuY3VycmVudFJlbW90ZSgpIH0pIDogbnVsbDtcbiAgcmV0dXJuIFByb21pc2UucHJvcHMoe3RhZzogdGFnUHJvbWlzZSwgZmV0Y2g6IGZldGNoUHJvbWlzZX0pXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICBpZiAob3B0aW9ucy50YWdzKSBwcm9ncmFtRXZlbnRzLmRpc3BhdGNoKHsgZXZlbnQ6ICdyZW1vdGUtdGFncy11cGRhdGUnLCB0YWdzOiByZXN1bHQudGFnIH0pO1xuICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmZldGNoaW5nUHJvZ3Jlc3NCYXIuc3RvcCgpO1xuICAgIH0pO1xufVxuXG5SZW1vdGVzVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVSZW1vdGVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICByZXR1cm4gdGhpcy5zZXJ2ZXIuZ2V0UHJvbWlzZSgnL3JlbW90ZXMnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlbW90ZXMpIHtcbiAgICAgIHJlbW90ZXMgPSByZW1vdGVzLm1hcChmdW5jdGlvbihyZW1vdGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiByZW1vdGUsXG4gICAgICAgICAgY2hhbmdlUmVtb3RlOiBmdW5jdGlvbigpIHsgc2VsZi5jdXJyZW50UmVtb3RlKHJlbW90ZSkgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHNlbGYucmVtb3RlcyhyZW1vdGVzKTtcbiAgICAgIGlmICghc2VsZi5jdXJyZW50UmVtb3RlKCkgJiYgcmVtb3Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChfLmZpbmQocmVtb3RlcywgeyAnbmFtZSc6ICdvcmlnaW4nIH0pKSB7Ly8gZGVmYXVsdCB0byBvcmlnaW4gaWYgaXQgZXhpc3RzXG4gICAgICAgICAgc2VsZi5jdXJyZW50UmVtb3RlKCdvcmlnaW4nKTtcbiAgICAgICAgfSBlbHNlIHsvLyBvdGhlcndpc2UgdGFrZSB0aGUgZmlyc3Qgb25lXG4gICAgICAgICAgc2VsZi5jdXJyZW50UmVtb3RlKHJlbW90ZXNbMF0ubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VsZi5zaG91bGRBdXRvRmV0Y2gpIHtcbiAgICAgICAgICBzZWxmLnNob3VsZEF1dG9GZXRjaCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBzZWxmLmZldGNoKHsgbm9kZXM6IHRydWUsIHRhZ3M6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgIGlmIChlcnIuZXJyb3JDb2RlICE9ICdub3QtYS1yZXBvc2l0b3J5JykgdGhyb3cgZXJyO1xuICAgIH0pO1xufVxuUmVtb3Rlc1ZpZXdNb2RlbC5wcm90b3R5cGUuc2hvd0FkZFJlbW90ZURpYWxvZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNvbXBvbmVudHMuY3JlYXRlKCdhZGRyZW1vdGVkaWFsb2cnKVxuICAgIC5zaG93KClcbiAgICAuY2xvc2VUaGVuKGZ1bmN0aW9uKGRpYWcpIHtcbiAgICAgIGlmKGRpYWcuaXNTdWJtaXR0ZWQoKSkge1xuICAgICAgICByZXR1cm4gc2VsZi5zZXJ2ZXIucG9zdFByb21pc2UoJy9yZW1vdGVzLycgKyBlbmNvZGVVUklDb21wb25lbnQoZGlhZy5uYW1lKCkpLCB7IHBhdGg6IHNlbGYucmVwb1BhdGgoKSwgdXJsOiBkaWFnLnVybCgpIH0pXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7IHNlbGYudXBkYXRlUmVtb3RlcygpOyB9KTtcbiAgICAgIH1cbiAgICB9KTtcbn1cblxuUmVtb3Rlc1ZpZXdNb2RlbC5wcm90b3R5cGUucmVtb3RlUmVtb3ZlID0gZnVuY3Rpb24ocmVtb3RlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY29tcG9uZW50cy5jcmVhdGUoJ3llc25vZGlhbG9nJywgeyB0aXRsZTogJ0FyZSB5b3Ugc3VyZT8nLCBkZXRhaWxzOiAnRGVsZXRpbmcgJyArIHJlbW90ZS5uYW1lICsgJyByZW1vdGUgY2Fubm90IGJlIHVuZG9uZSB3aXRoIHVuZ2l0Lid9KVxuICAgIC5zaG93KClcbiAgICAuY2xvc2VUaGVuKGZ1bmN0aW9uKGRpYWcpIHtcbiAgICAgIGlmIChkaWFnLnJlc3VsdCgpKSB7XG4gICAgICAgIHNlbGYuZmV0Y2hpbmdQcm9ncmVzc0Jhci5zdGFydCgpO1xuICAgICAgICByZXR1cm4gc2VsZi5zZXJ2ZXIuZGVsUHJvbWlzZSgnL3JlbW90ZXMvJyArIHJlbW90ZS5uYW1lLCB7IHBhdGg6IHNlbGYucmVwb1BhdGgoKSB9KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkgeyBzZWxmLnVwZGF0ZVJlbW90ZXMoKTsgfSlcbiAgICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpXG4gICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24oKSB7IHNlbGYuZmV0Y2hpbmdQcm9ncmVzc0Jhci5zdG9wKCk7IH0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuIl19
