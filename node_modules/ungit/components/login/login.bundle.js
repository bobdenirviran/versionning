(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var signals = require('signals');

components.register('login', function(args) {
  return new LoginViewModel(args.server);
});

var LoginViewModel = function(server) {
  var self = this;
  this.server = server;
  this.loggedIn = new signals.Signal();
  this.status = ko.observable('loading');
  this.username = ko.observable();
  this.password = ko.observable();
  this.loginError = ko.observable();
  this.server.getPromise('/loggedin')
    .then(function(status) {
      if (status.loggedIn) {
        self.loggedIn.dispatch();
        self.status('loggedIn');
      } else {
        self.status('login');
      }
    }).catch(function(err) { });
}
LoginViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('login', this, {}, parentElement);
}
LoginViewModel.prototype.login = function() {
  var self = this;
  this.server.postPromise('/login', { username: this.username(), password: this.password() }).then(function(res) {
    self.loggedIn.dispatch();
    self.status('loggedIn');
  }).catch(function(err) {
    if (err.res.body.error) {
      self.loginError(err.res.body.error);
    } else {
      throw err;
    }
  });
}

},{"knockout":"knockout","signals":undefined,"ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2xvZ2luL2xvZ2luLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbnZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBzaWduYWxzID0gcmVxdWlyZSgnc2lnbmFscycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdsb2dpbicsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBMb2dpblZpZXdNb2RlbChhcmdzLnNlcnZlcik7XG59KTtcblxudmFyIExvZ2luVmlld01vZGVsID0gZnVuY3Rpb24oc2VydmVyKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMubG9nZ2VkSW4gPSBuZXcgc2lnbmFscy5TaWduYWwoKTtcbiAgdGhpcy5zdGF0dXMgPSBrby5vYnNlcnZhYmxlKCdsb2FkaW5nJyk7XG4gIHRoaXMudXNlcm5hbWUgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMucGFzc3dvcmQgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMubG9naW5FcnJvciA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5zZXJ2ZXIuZ2V0UHJvbWlzZSgnL2xvZ2dlZGluJylcbiAgICAudGhlbihmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgIGlmIChzdGF0dXMubG9nZ2VkSW4pIHtcbiAgICAgICAgc2VsZi5sb2dnZWRJbi5kaXNwYXRjaCgpO1xuICAgICAgICBzZWxmLnN0YXR1cygnbG9nZ2VkSW4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuc3RhdHVzKCdsb2dpbicpO1xuICAgICAgfVxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgeyB9KTtcbn1cbkxvZ2luVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgnbG9naW4nLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG59XG5Mb2dpblZpZXdNb2RlbC5wcm90b3R5cGUubG9naW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlcnZlci5wb3N0UHJvbWlzZSgnL2xvZ2luJywgeyB1c2VybmFtZTogdGhpcy51c2VybmFtZSgpLCBwYXNzd29yZDogdGhpcy5wYXNzd29yZCgpIH0pLnRoZW4oZnVuY3Rpb24ocmVzKSB7XG4gICAgc2VsZi5sb2dnZWRJbi5kaXNwYXRjaCgpO1xuICAgIHNlbGYuc3RhdHVzKCdsb2dnZWRJbicpO1xuICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAoZXJyLnJlcy5ib2R5LmVycm9yKSB7XG4gICAgICBzZWxmLmxvZ2luRXJyb3IoZXJyLnJlcy5ib2R5LmVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=
