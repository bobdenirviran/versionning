(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');
var navigation = require('ungit-navigation');

components.register('gitErrors', function(args) {
  return new GitErrorsViewModel(args.server, args.repoPath);
});

var GitErrorsViewModel = function(server, repoPath) {
  var self = this;
  this.server = server;
  this.repoPath = repoPath;
  this.gitErrors = ko.observableArray();
}
GitErrorsViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('gitErrors', this, {}, parentElement);
}
GitErrorsViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'git-error') this._handleGitError(event);
}
GitErrorsViewModel.prototype._handleGitError = function(event) {
  if (event.data.repoPath != this.repoPath()) return;
  this.gitErrors.push(new GitErrorViewModel(this, this.server, event.data));
}

function GitErrorViewModel(gitErrors, server, data) {
  var self = this;
  this.gitErrors = gitErrors;
  this.server = server;
  this.tip = data.tip;
  this.command = data.command;
  this.error = data.error;
  this.stdout = data.stdout;
  this.stderr = data.stderr;
  this.showEnableBugtracking = ko.observable(false);
  this.bugReportWasSent = ungit.config.bugtracking;

  if (!data.shouldSkipReport && !ungit.config.bugtracking) {
    this.server.getPromise('/userconfig')
      .then(function(userConfig) { self.showEnableBugtracking(!userConfig.bugtracking); })
      .catch(function(err) {});
  }
}
GitErrorViewModel.prototype.dismiss = function() {
  this.gitErrors.gitErrors.remove(this);
}
GitErrorViewModel.prototype.enableBugtrackingAndStatistics = function() {
  var self = this;
  this.server.getPromise('/userconfig')
    .then(function(userConfig) {
      userConfig.bugtracking = true;
      userConfig.sendUsageStatistics = true;
      return self.server.postPromise('/userconfig', userConfig)
        .then(function() { self.showEnableBugtracking(false); })
    }).catch(function(err) {});
}

},{"knockout":"knockout","ungit-components":"ungit-components","ungit-navigation":"ungit-navigation","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2dpdEVycm9ycy9naXRFcnJvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xudmFyIHByb2dyYW1FdmVudHMgPSByZXF1aXJlKCd1bmdpdC1wcm9ncmFtLWV2ZW50cycpO1xudmFyIG5hdmlnYXRpb24gPSByZXF1aXJlKCd1bmdpdC1uYXZpZ2F0aW9uJyk7XG5cbmNvbXBvbmVudHMucmVnaXN0ZXIoJ2dpdEVycm9ycycsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBHaXRFcnJvcnNWaWV3TW9kZWwoYXJncy5zZXJ2ZXIsIGFyZ3MucmVwb1BhdGgpO1xufSk7XG5cbnZhciBHaXRFcnJvcnNWaWV3TW9kZWwgPSBmdW5jdGlvbihzZXJ2ZXIsIHJlcG9QYXRoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMucmVwb1BhdGggPSByZXBvUGF0aDtcbiAgdGhpcy5naXRFcnJvcnMgPSBrby5vYnNlcnZhYmxlQXJyYXkoKTtcbn1cbkdpdEVycm9yc1ZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlTm9kZSA9IGZ1bmN0aW9uKHBhcmVudEVsZW1lbnQpIHtcbiAga28ucmVuZGVyVGVtcGxhdGUoJ2dpdEVycm9ycycsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cbkdpdEVycm9yc1ZpZXdNb2RlbC5wcm90b3R5cGUub25Qcm9ncmFtRXZlbnQgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZXZlbnQuZXZlbnQgPT0gJ2dpdC1lcnJvcicpIHRoaXMuX2hhbmRsZUdpdEVycm9yKGV2ZW50KTtcbn1cbkdpdEVycm9yc1ZpZXdNb2RlbC5wcm90b3R5cGUuX2hhbmRsZUdpdEVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmRhdGEucmVwb1BhdGggIT0gdGhpcy5yZXBvUGF0aCgpKSByZXR1cm47XG4gIHRoaXMuZ2l0RXJyb3JzLnB1c2gobmV3IEdpdEVycm9yVmlld01vZGVsKHRoaXMsIHRoaXMuc2VydmVyLCBldmVudC5kYXRhKSk7XG59XG5cbmZ1bmN0aW9uIEdpdEVycm9yVmlld01vZGVsKGdpdEVycm9ycywgc2VydmVyLCBkYXRhKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5naXRFcnJvcnMgPSBnaXRFcnJvcnM7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLnRpcCA9IGRhdGEudGlwO1xuICB0aGlzLmNvbW1hbmQgPSBkYXRhLmNvbW1hbmQ7XG4gIHRoaXMuZXJyb3IgPSBkYXRhLmVycm9yO1xuICB0aGlzLnN0ZG91dCA9IGRhdGEuc3Rkb3V0O1xuICB0aGlzLnN0ZGVyciA9IGRhdGEuc3RkZXJyO1xuICB0aGlzLnNob3dFbmFibGVCdWd0cmFja2luZyA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLmJ1Z1JlcG9ydFdhc1NlbnQgPSB1bmdpdC5jb25maWcuYnVndHJhY2tpbmc7XG5cbiAgaWYgKCFkYXRhLnNob3VsZFNraXBSZXBvcnQgJiYgIXVuZ2l0LmNvbmZpZy5idWd0cmFja2luZykge1xuICAgIHRoaXMuc2VydmVyLmdldFByb21pc2UoJy91c2VyY29uZmlnJylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXJDb25maWcpIHsgc2VsZi5zaG93RW5hYmxlQnVndHJhY2tpbmcoIXVzZXJDb25maWcuYnVndHJhY2tpbmcpOyB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge30pO1xuICB9XG59XG5HaXRFcnJvclZpZXdNb2RlbC5wcm90b3R5cGUuZGlzbWlzcyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmdpdEVycm9ycy5naXRFcnJvcnMucmVtb3ZlKHRoaXMpO1xufVxuR2l0RXJyb3JWaWV3TW9kZWwucHJvdG90eXBlLmVuYWJsZUJ1Z3RyYWNraW5nQW5kU3RhdGlzdGljcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2VydmVyLmdldFByb21pc2UoJy91c2VyY29uZmlnJylcbiAgICAudGhlbihmdW5jdGlvbih1c2VyQ29uZmlnKSB7XG4gICAgICB1c2VyQ29uZmlnLmJ1Z3RyYWNraW5nID0gdHJ1ZTtcbiAgICAgIHVzZXJDb25maWcuc2VuZFVzYWdlU3RhdGlzdGljcyA9IHRydWU7XG4gICAgICByZXR1cm4gc2VsZi5zZXJ2ZXIucG9zdFByb21pc2UoJy91c2VyY29uZmlnJywgdXNlckNvbmZpZylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7IHNlbGYuc2hvd0VuYWJsZUJ1Z3RyYWNraW5nKGZhbHNlKTsgfSlcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHt9KTtcbn1cbiJdfQ==
