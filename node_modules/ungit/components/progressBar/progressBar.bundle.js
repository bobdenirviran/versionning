(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');

components.register('progressBar', function(args) {
  return new ProgressBarViewModel(args.predictionMemoryKey, args.fallbackPredictedTimeMs, args.temporary);
});

var ProgressBarViewModel = function(predictionMemoryKey, fallbackPredictedTimeMs, temporary) {
  var self = this;
  if (fallbackPredictedTimeMs === undefined) fallbackPredictedTimeMs = 1000;
  this.temporary = temporary;
  this.style = ko.observable();
  this.running = ko.observable(false);
  self._width = ko.observable(0);
  self._opacity = ko.observable(1);
  self._widthSpeed = ko.observable(0);
  self._opacitySpeed = ko.observable(0);
  self._animationState = ko.observable('running');
  this.style = ko.computed(function() {
    return 'width: ' + self._width() + '%; ' + 
      'opacity: ' + self._opacity() + '; ' +
      '-webkit-transition: width ' + self._widthSpeed() + 'ms, opacity ' + self._opacitySpeed() + 'ms;' +
      'transition: width ' + self._widthSpeed() + 'ms, opacity ' + self._opacitySpeed() + 'ms; ' +
      'animation-play-state: ' + self._animationState();
  });
  this.predictionMemoryKey = 'predict-' + predictionMemoryKey;
  this.isFirstRun = ko.observable(false);
  this.fallbackPredictedTimeMs = fallbackPredictedTimeMs;
}
ProgressBarViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate(this.temporary ? 'temporaryProgressBar' : 'progressBar', this, {}, parentElement);
}
ProgressBarViewModel.prototype.start = function() {
  if (this.running()) return;
  var self = this;
  var predictionMs = localStorage.getItem(this.predictionMemoryKey);
  if (!predictionMs || isNaN(predictionMs)) {
    this.isFirstRun(true);
    predictionMs = this.fallbackPredictedTimeMs;
  } else {
    predictionMs = parseInt(predictionMs);
  }
  this.predictionMs = predictionMs;
  this._width(0);
  this._opacity(1);
  this._opacitySpeed(0);
  this._widthSpeed(0);
  this._animationState('running');
  this.running(true);
  this.startMs = Date.now();
  this.pausedMs = 0;
  setTimeout(function(){
    predictionMs = Math.max(500, predictionMs);
    self._width(80);
    self._widthSpeed(predictionMs);
  }, 1);
}

ProgressBarViewModel.prototype.pause = function() {
  this._animationState('paused');
  this.pauseStartMs = Date.now();
}
ProgressBarViewModel.prototype.unpause = function() {
  this._animationState('running');
  this.pausedMs += Date.now() - this.pauseStartMs;
}
ProgressBarViewModel.prototype.stop = function() {
  var self = this;
  var elapsedMs = Date.now() - this.startMs - this.pausedMs;
  var newPrediction;
  if (self.isFirstRun()) {
    self.isFirstRun(false);
    newPrediction = elapsedMs;
  } else {
    newPrediction = elapsedMs * 0.1 + self.predictionMs * 0.9;
  }
  localStorage.setItem(self.predictionMemoryKey, newPrediction.toString());

  self._width(100);
  self._widthSpeed(300);
  setTimeout(function() {
    self._opacity(0);
    self._opacitySpeed(300);
    setTimeout(function() {
      self.running(false);
    }, 310);
  }, 400);
}

},{"knockout":"knockout","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3Byb2dyZXNzQmFyL3Byb2dyZXNzQmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdwcm9ncmVzc0JhcicsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBQcm9ncmVzc0JhclZpZXdNb2RlbChhcmdzLnByZWRpY3Rpb25NZW1vcnlLZXksIGFyZ3MuZmFsbGJhY2tQcmVkaWN0ZWRUaW1lTXMsIGFyZ3MudGVtcG9yYXJ5KTtcbn0pO1xuXG52YXIgUHJvZ3Jlc3NCYXJWaWV3TW9kZWwgPSBmdW5jdGlvbihwcmVkaWN0aW9uTWVtb3J5S2V5LCBmYWxsYmFja1ByZWRpY3RlZFRpbWVNcywgdGVtcG9yYXJ5KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKGZhbGxiYWNrUHJlZGljdGVkVGltZU1zID09PSB1bmRlZmluZWQpIGZhbGxiYWNrUHJlZGljdGVkVGltZU1zID0gMTAwMDtcbiAgdGhpcy50ZW1wb3JhcnkgPSB0ZW1wb3Jhcnk7XG4gIHRoaXMuc3R5bGUgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMucnVubmluZyA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICBzZWxmLl93aWR0aCA9IGtvLm9ic2VydmFibGUoMCk7XG4gIHNlbGYuX29wYWNpdHkgPSBrby5vYnNlcnZhYmxlKDEpO1xuICBzZWxmLl93aWR0aFNwZWVkID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgc2VsZi5fb3BhY2l0eVNwZWVkID0ga28ub2JzZXJ2YWJsZSgwKTtcbiAgc2VsZi5fYW5pbWF0aW9uU3RhdGUgPSBrby5vYnNlcnZhYmxlKCdydW5uaW5nJyk7XG4gIHRoaXMuc3R5bGUgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJ3dpZHRoOiAnICsgc2VsZi5fd2lkdGgoKSArICclOyAnICsgXG4gICAgICAnb3BhY2l0eTogJyArIHNlbGYuX29wYWNpdHkoKSArICc7ICcgK1xuICAgICAgJy13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggJyArIHNlbGYuX3dpZHRoU3BlZWQoKSArICdtcywgb3BhY2l0eSAnICsgc2VsZi5fb3BhY2l0eVNwZWVkKCkgKyAnbXM7JyArXG4gICAgICAndHJhbnNpdGlvbjogd2lkdGggJyArIHNlbGYuX3dpZHRoU3BlZWQoKSArICdtcywgb3BhY2l0eSAnICsgc2VsZi5fb3BhY2l0eVNwZWVkKCkgKyAnbXM7ICcgK1xuICAgICAgJ2FuaW1hdGlvbi1wbGF5LXN0YXRlOiAnICsgc2VsZi5fYW5pbWF0aW9uU3RhdGUoKTtcbiAgfSk7XG4gIHRoaXMucHJlZGljdGlvbk1lbW9yeUtleSA9ICdwcmVkaWN0LScgKyBwcmVkaWN0aW9uTWVtb3J5S2V5O1xuICB0aGlzLmlzRmlyc3RSdW4gPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgdGhpcy5mYWxsYmFja1ByZWRpY3RlZFRpbWVNcyA9IGZhbGxiYWNrUHJlZGljdGVkVGltZU1zO1xufVxuUHJvZ3Jlc3NCYXJWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKHRoaXMudGVtcG9yYXJ5ID8gJ3RlbXBvcmFyeVByb2dyZXNzQmFyJyA6ICdwcm9ncmVzc0JhcicsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cblByb2dyZXNzQmFyVmlld01vZGVsLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5ydW5uaW5nKCkpIHJldHVybjtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgcHJlZGljdGlvbk1zID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5wcmVkaWN0aW9uTWVtb3J5S2V5KTtcbiAgaWYgKCFwcmVkaWN0aW9uTXMgfHwgaXNOYU4ocHJlZGljdGlvbk1zKSkge1xuICAgIHRoaXMuaXNGaXJzdFJ1bih0cnVlKTtcbiAgICBwcmVkaWN0aW9uTXMgPSB0aGlzLmZhbGxiYWNrUHJlZGljdGVkVGltZU1zO1xuICB9IGVsc2Uge1xuICAgIHByZWRpY3Rpb25NcyA9IHBhcnNlSW50KHByZWRpY3Rpb25Ncyk7XG4gIH1cbiAgdGhpcy5wcmVkaWN0aW9uTXMgPSBwcmVkaWN0aW9uTXM7XG4gIHRoaXMuX3dpZHRoKDApO1xuICB0aGlzLl9vcGFjaXR5KDEpO1xuICB0aGlzLl9vcGFjaXR5U3BlZWQoMCk7XG4gIHRoaXMuX3dpZHRoU3BlZWQoMCk7XG4gIHRoaXMuX2FuaW1hdGlvblN0YXRlKCdydW5uaW5nJyk7XG4gIHRoaXMucnVubmluZyh0cnVlKTtcbiAgdGhpcy5zdGFydE1zID0gRGF0ZS5ub3coKTtcbiAgdGhpcy5wYXVzZWRNcyA9IDA7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICBwcmVkaWN0aW9uTXMgPSBNYXRoLm1heCg1MDAsIHByZWRpY3Rpb25Ncyk7XG4gICAgc2VsZi5fd2lkdGgoODApO1xuICAgIHNlbGYuX3dpZHRoU3BlZWQocHJlZGljdGlvbk1zKTtcbiAgfSwgMSk7XG59XG5cblByb2dyZXNzQmFyVmlld01vZGVsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9hbmltYXRpb25TdGF0ZSgncGF1c2VkJyk7XG4gIHRoaXMucGF1c2VTdGFydE1zID0gRGF0ZS5ub3coKTtcbn1cblByb2dyZXNzQmFyVmlld01vZGVsLnByb3RvdHlwZS51bnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2FuaW1hdGlvblN0YXRlKCdydW5uaW5nJyk7XG4gIHRoaXMucGF1c2VkTXMgKz0gRGF0ZS5ub3coKSAtIHRoaXMucGF1c2VTdGFydE1zO1xufVxuUHJvZ3Jlc3NCYXJWaWV3TW9kZWwucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZWxhcHNlZE1zID0gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRNcyAtIHRoaXMucGF1c2VkTXM7XG4gIHZhciBuZXdQcmVkaWN0aW9uO1xuICBpZiAoc2VsZi5pc0ZpcnN0UnVuKCkpIHtcbiAgICBzZWxmLmlzRmlyc3RSdW4oZmFsc2UpO1xuICAgIG5ld1ByZWRpY3Rpb24gPSBlbGFwc2VkTXM7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJlZGljdGlvbiA9IGVsYXBzZWRNcyAqIDAuMSArIHNlbGYucHJlZGljdGlvbk1zICogMC45O1xuICB9XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHNlbGYucHJlZGljdGlvbk1lbW9yeUtleSwgbmV3UHJlZGljdGlvbi50b1N0cmluZygpKTtcblxuICBzZWxmLl93aWR0aCgxMDApO1xuICBzZWxmLl93aWR0aFNwZWVkKDMwMCk7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5fb3BhY2l0eSgwKTtcbiAgICBzZWxmLl9vcGFjaXR5U3BlZWQoMzAwKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5ydW5uaW5nKGZhbHNlKTtcbiAgICB9LCAzMTApO1xuICB9LCA0MDApO1xufVxuIl19
