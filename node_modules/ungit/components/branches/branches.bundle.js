(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var _ = require('lodash');
var async = require('async');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');

components.register('branches', function(args) {
  return new BranchesViewModel(args.server, args.repoPath);
});

function BranchesViewModel(server, repoPath) {
  var self = this;
  this.repoPath = repoPath;
  this.server = server;
  this.branches = ko.observableArray();
  this.fetchingProgressBar = components.create('progressBar', { predictionMemoryKey: 'fetching-' + this.repoPath(), temporary: true });
  this.current = ko.observable();
  this.fetchLabel = ko.computed(function() {
    if (self.current()) {
      return self.current();
    }
  });
  this.updateBranches();
}
BranchesViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('branches', this, {}, parentElement);
}
BranchesViewModel.prototype.clickFetch = function() { this.updateBranches(); }
BranchesViewModel.prototype.onProgramEvent = function(event) {
  if (event.event === 'working-tree-changed' || event.event == 'request-app-content-refresh' || event.event == 'branch-updated') {
    this.updateBranches();
  }
}
BranchesViewModel.prototype.checkoutBranch = function(branch) {
  var self = this;
  this.fetchingProgressBar.start();
  this.server.postPromise('/checkout', { path: this.repoPath(), name: branch.name })
    .then(function() { self.current(branch.name); })
    .finally(function() { self.fetchingProgressBar.stop(); });
}
BranchesViewModel.prototype.updateBranches = function() {
  var self = this;
  this.fetchingProgressBar.start();

  this.server.getPromise('/branches', { path: this.repoPath() })
    .then(function(branches) {
      var sorted = branches.sort(function(a, b) {
        if (a.name < b.name)
           return -1;
        if (a.name > b.name)
          return 1;
        return 0;
      });
      self.branches(sorted);
      self.current(undefined);
      branches.forEach(function(branch) {
        if (branch.current) {
          self.current(branch.name);
        }
      });
    }).catch(function(err) { self.current("~error"); })
    .finally(function() { self.fetchingProgressBar.stop() })
}

BranchesViewModel.prototype.branchRemove = function(branch) {
  var self = this;
  components.create('yesnodialog', { title: 'Are you sure?', details: 'Deleting ' + branch.name + ' branch cannot be undone with ungit.'})
    .show()
    .closeThen(function(diag) {
      if (!diag.result()) return;
      self.server.delPromise('/branches', { name: branch.name, path: self.repoPath() })
        .then(function() { programEvents.dispatch({ event: 'working-tree-changed' }); });
    });
}

},{"async":"async","knockout":"knockout","lodash":"lodash","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2JyYW5jaGVzL2JyYW5jaGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBwcm9ncmFtRXZlbnRzID0gcmVxdWlyZSgndW5naXQtcHJvZ3JhbS1ldmVudHMnKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcignYnJhbmNoZXMnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgQnJhbmNoZXNWaWV3TW9kZWwoYXJncy5zZXJ2ZXIsIGFyZ3MucmVwb1BhdGgpO1xufSk7XG5cbmZ1bmN0aW9uIEJyYW5jaGVzVmlld01vZGVsKHNlcnZlciwgcmVwb1BhdGgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlcG9QYXRoID0gcmVwb1BhdGg7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLmJyYW5jaGVzID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XG4gIHRoaXMuZmV0Y2hpbmdQcm9ncmVzc0JhciA9IGNvbXBvbmVudHMuY3JlYXRlKCdwcm9ncmVzc0JhcicsIHsgcHJlZGljdGlvbk1lbW9yeUtleTogJ2ZldGNoaW5nLScgKyB0aGlzLnJlcG9QYXRoKCksIHRlbXBvcmFyeTogdHJ1ZSB9KTtcbiAgdGhpcy5jdXJyZW50ID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLmZldGNoTGFiZWwgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5jdXJyZW50KCkpIHtcbiAgICAgIHJldHVybiBzZWxmLmN1cnJlbnQoKTtcbiAgICB9XG4gIH0pO1xuICB0aGlzLnVwZGF0ZUJyYW5jaGVzKCk7XG59XG5CcmFuY2hlc1ZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlTm9kZSA9IGZ1bmN0aW9uKHBhcmVudEVsZW1lbnQpIHtcbiAga28ucmVuZGVyVGVtcGxhdGUoJ2JyYW5jaGVzJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufVxuQnJhbmNoZXNWaWV3TW9kZWwucHJvdG90eXBlLmNsaWNrRmV0Y2ggPSBmdW5jdGlvbigpIHsgdGhpcy51cGRhdGVCcmFuY2hlcygpOyB9XG5CcmFuY2hlc1ZpZXdNb2RlbC5wcm90b3R5cGUub25Qcm9ncmFtRXZlbnQgPSBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZXZlbnQuZXZlbnQgPT09ICd3b3JraW5nLXRyZWUtY2hhbmdlZCcgfHwgZXZlbnQuZXZlbnQgPT0gJ3JlcXVlc3QtYXBwLWNvbnRlbnQtcmVmcmVzaCcgfHwgZXZlbnQuZXZlbnQgPT0gJ2JyYW5jaC11cGRhdGVkJykge1xuICAgIHRoaXMudXBkYXRlQnJhbmNoZXMoKTtcbiAgfVxufVxuQnJhbmNoZXNWaWV3TW9kZWwucHJvdG90eXBlLmNoZWNrb3V0QnJhbmNoID0gZnVuY3Rpb24oYnJhbmNoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5mZXRjaGluZ1Byb2dyZXNzQmFyLnN0YXJ0KCk7XG4gIHRoaXMuc2VydmVyLnBvc3RQcm9taXNlKCcvY2hlY2tvdXQnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSwgbmFtZTogYnJhbmNoLm5hbWUgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHsgc2VsZi5jdXJyZW50KGJyYW5jaC5uYW1lKTsgfSlcbiAgICAuZmluYWxseShmdW5jdGlvbigpIHsgc2VsZi5mZXRjaGluZ1Byb2dyZXNzQmFyLnN0b3AoKTsgfSk7XG59XG5CcmFuY2hlc1ZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlQnJhbmNoZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLmZldGNoaW5nUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcblxuICB0aGlzLnNlcnZlci5nZXRQcm9taXNlKCcvYnJhbmNoZXMnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgoKSB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKGJyYW5jaGVzKSB7XG4gICAgICB2YXIgc29ydGVkID0gYnJhbmNoZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIGlmIChhLm5hbWUgPCBiLm5hbWUpXG4gICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGEubmFtZSA+IGIubmFtZSlcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgICAgIHNlbGYuYnJhbmNoZXMoc29ydGVkKTtcbiAgICAgIHNlbGYuY3VycmVudCh1bmRlZmluZWQpO1xuICAgICAgYnJhbmNoZXMuZm9yRWFjaChmdW5jdGlvbihicmFuY2gpIHtcbiAgICAgICAgaWYgKGJyYW5jaC5jdXJyZW50KSB7XG4gICAgICAgICAgc2VsZi5jdXJyZW50KGJyYW5jaC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7IHNlbGYuY3VycmVudChcIn5lcnJvclwiKTsgfSlcbiAgICAuZmluYWxseShmdW5jdGlvbigpIHsgc2VsZi5mZXRjaGluZ1Byb2dyZXNzQmFyLnN0b3AoKSB9KVxufVxuXG5CcmFuY2hlc1ZpZXdNb2RlbC5wcm90b3R5cGUuYnJhbmNoUmVtb3ZlID0gZnVuY3Rpb24oYnJhbmNoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY29tcG9uZW50cy5jcmVhdGUoJ3llc25vZGlhbG9nJywgeyB0aXRsZTogJ0FyZSB5b3Ugc3VyZT8nLCBkZXRhaWxzOiAnRGVsZXRpbmcgJyArIGJyYW5jaC5uYW1lICsgJyBicmFuY2ggY2Fubm90IGJlIHVuZG9uZSB3aXRoIHVuZ2l0Lid9KVxuICAgIC5zaG93KClcbiAgICAuY2xvc2VUaGVuKGZ1bmN0aW9uKGRpYWcpIHtcbiAgICAgIGlmICghZGlhZy5yZXN1bHQoKSkgcmV0dXJuO1xuICAgICAgc2VsZi5zZXJ2ZXIuZGVsUHJvbWlzZSgnL2JyYW5jaGVzJywgeyBuYW1lOiBicmFuY2gubmFtZSwgcGF0aDogc2VsZi5yZXBvUGF0aCgpIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkgeyBwcm9ncmFtRXZlbnRzLmRpc3BhdGNoKHsgZXZlbnQ6ICd3b3JraW5nLXRyZWUtY2hhbmdlZCcgfSk7IH0pO1xuICAgIH0pO1xufVxuIl19
