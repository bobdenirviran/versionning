(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var Promise = require('bluebird');

components.register('imagediff', function(args) {
  return new ImageDiffViewModel(args);
});

var ImageDiffViewModel = function(args) {
  var self = this;
  this.filename = args.filename;
  this.repoPath = args.repoPath;
  this.isNew = ko.observable(false);
  this.isRemoved = ko.observable(false);
  this.sha1 = args.sha1;
  this.state = ko.computed(function() {
    if (self.isNew()) return 'new';
    if (self.isRemoved()) return 'removed';
    return 'changed';
  });
  var gitDiffURL = ungit.config.rootPath + '/api/diff/image?path=' + encodeURIComponent(self.repoPath()) + '&filename=' + self.filename + '&version=';
  this.oldImageSrc = gitDiffURL + (self.sha1 ? self.sha1 + '^': 'HEAD');
  this.newImageSrc = gitDiffURL + (self.sha1 ? self.sha1: 'current');
  this.isShowingDiffs = args.isShowingDiffs;
}
ImageDiffViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('imagediff', this, {}, parentElement);
}
ImageDiffViewModel.prototype.invalidateDiff = function() {}
ImageDiffViewModel.prototype.newImageError = function() {
  this.isRemoved(true);
}
ImageDiffViewModel.prototype.oldImageError = function() {
  this.isNew(true);
}

},{"bluebird":undefined,"knockout":"knockout","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2ltYWdlZGlmZi9pbWFnZWRpZmYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbnZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcignaW1hZ2VkaWZmJywgZnVuY3Rpb24oYXJncykge1xuICByZXR1cm4gbmV3IEltYWdlRGlmZlZpZXdNb2RlbChhcmdzKTtcbn0pO1xuXG52YXIgSW1hZ2VEaWZmVmlld01vZGVsID0gZnVuY3Rpb24oYXJncykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuZmlsZW5hbWUgPSBhcmdzLmZpbGVuYW1lO1xuICB0aGlzLnJlcG9QYXRoID0gYXJncy5yZXBvUGF0aDtcbiAgdGhpcy5pc05ldyA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLmlzUmVtb3ZlZCA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLnNoYTEgPSBhcmdzLnNoYTE7XG4gIHRoaXMuc3RhdGUgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5pc05ldygpKSByZXR1cm4gJ25ldyc7XG4gICAgaWYgKHNlbGYuaXNSZW1vdmVkKCkpIHJldHVybiAncmVtb3ZlZCc7XG4gICAgcmV0dXJuICdjaGFuZ2VkJztcbiAgfSk7XG4gIHZhciBnaXREaWZmVVJMID0gdW5naXQuY29uZmlnLnJvb3RQYXRoICsgJy9hcGkvZGlmZi9pbWFnZT9wYXRoPScgKyBlbmNvZGVVUklDb21wb25lbnQoc2VsZi5yZXBvUGF0aCgpKSArICcmZmlsZW5hbWU9JyArIHNlbGYuZmlsZW5hbWUgKyAnJnZlcnNpb249JztcbiAgdGhpcy5vbGRJbWFnZVNyYyA9IGdpdERpZmZVUkwgKyAoc2VsZi5zaGExID8gc2VsZi5zaGExICsgJ14nOiAnSEVBRCcpO1xuICB0aGlzLm5ld0ltYWdlU3JjID0gZ2l0RGlmZlVSTCArIChzZWxmLnNoYTEgPyBzZWxmLnNoYTE6ICdjdXJyZW50Jyk7XG4gIHRoaXMuaXNTaG93aW5nRGlmZnMgPSBhcmdzLmlzU2hvd2luZ0RpZmZzO1xufVxuSW1hZ2VEaWZmVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgnaW1hZ2VkaWZmJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufVxuSW1hZ2VEaWZmVmlld01vZGVsLnByb3RvdHlwZS5pbnZhbGlkYXRlRGlmZiA9IGZ1bmN0aW9uKCkge31cbkltYWdlRGlmZlZpZXdNb2RlbC5wcm90b3R5cGUubmV3SW1hZ2VFcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmlzUmVtb3ZlZCh0cnVlKTtcbn1cbkltYWdlRGlmZlZpZXdNb2RlbC5wcm90b3R5cGUub2xkSW1hZ2VFcnJvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmlzTmV3KHRydWUpO1xufVxuIl19
